ARG ALPINE_VERSION=3.15

# Versions of nginx, rtmp-module and ffmpeg 
ARG  NGINX_VERSION=1.21.6
ARG  NGINX_RTMP_MODULE_VERSION=1.2.2
ARG  FFMPEG_VERSION=5.0.1

##### Base Build stage #####
FROM alpine:${ALPINE_VERSION} as builder

# Install dependencies
RUN apk --no-cache add \
		build-base \
		ca-certificates \
		openssl3-dev


##### Build nginx #####
FROM builder as nginx

ARG  NGINX_VERSION
ARG  NGINX_RTMP_MODULE_VERSION

RUN apk add --no-cache \
		pcre2-dev

# Download nginx source
RUN cd / && \
	wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -O - | tar zxf -

# Download rtmp-module source
RUN cd / && \
    wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_MODULE_VERSION}.tar.gz -O - | tar zxf -
	
# Build nginx with nginx-rtmp module
RUN cd /nginx-${NGINX_VERSION} && \
    ./configure \
		--prefix=/etc/nginx \ 
        --sbin-path=/usr/sbin/nginx \ 
        --modules-path=/usr/lib/nginx/modules \ 
        --conf-path=/etc/nginx/nginx.conf \
        --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --http-client-body-temp-path=/tmp/nginx-client-body \
        --with-http_ssl_module \
		--with-stream \
		--with-stream_ssl_module \
        --with-threads \
        --add-module=/nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION} && \
    make CFLAGS=-Wno-error -j $(getconf _NPROCESSORS_ONLN) && \
    make install

	# Copy stats.xsl file to nginx html directory and clean build files
RUN cp /nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}/stat.xsl /etc/nginx/html/stat.xsl


##### Build ffmpeg #####
FROM builder as ffmpeg

ARG  FFMPEG_VERSION

RUN apk add --no-cache \
		lame-dev \
		yasm \
		libtheora-dev \
		libvorbis-dev \
		libvpx-dev \
		freetype-dev \
		x264-dev \
		x265-dev	

# Download ffmpeg source
RUN cd / && \
  wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz -O - | tar zxf -

# Build ffmpeg
RUN cd /ffmpeg-${FFMPEG_VERSION} && \
  ./configure \
	  --enable-version3 \
	  --enable-gpl \
	  --enable-openssl \
	  --enable-pthreads \
	  --enable-runtime-cpudetect \
	  --enable-small \
	  --enable-libx264 \
	  --enable-libx265 \
	  --enable-libvpx \
	  --enable-libtheora \
	  --enable-libvorbis \
	  --enable-postproc \
	  --enable-swresample \
	  --enable-libfreetype \
	  --enable-libmp3lame \
	  --disable-debug \
	  --disable-doc \
	  --disable-ffplay \
	  --extra-libs="-lpthread -lm" && \
	make -j $(getconf _NPROCESSORS_ONLN) && \
	make install	

##### Building the final image #####
FROM alpine:${ALPINE_VERSION}

# Install dependencies and create the assets folder for default players and configs to be copied to
RUN apk --no-cache add \
		ca-certificates openssl3 \
		pcre libtheora libvorbis lame libvpx \
		librtmp x264-dev x265-dev freetype stunnel htop && \
		mkdir -p /assets-default/ssl && \
		mkdir /assets && mkdir -p /var/log/nginx/ 

# Copy files from build stage to final stage		
COPY --from=nginx /usr/sbin/nginx /usr/sbin/nginx
COPY --from=nginx /etc/nginx /etc/nginx
COPY --from=ffmpeg /usr/local/ /usr/local/

# Forward logs to Docker
RUN touch /var/log/nginx/access.log && \
	ln -sf /dev/stdout /var/log/nginx/access.log && \
	touch /var/log/nginx/error.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

# Copy  nginx config file to container
COPY conf /assets-default/configs

# Copy  html players to container
COPY players /assets-default/players

# Copy run script to container
COPY run.sh /run.sh

ENV IMAGE=Alpine
ENV PUID=0
ENV PGID=0
ENV SSL_DOMAIN=rtmp-server.loc
EXPOSE 1935
EXPOSE 1936
EXPOSE 8080
VOLUME /assets

CMD ["bash", "/run.sh"]
